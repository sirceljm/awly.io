class {
    onInput(input) {
        this.state = {
            checked: input.checked === true,
        };
    }

    isChecked() {
        return this.state.checked === true;
    }

    setChecked(newChecked) {
        this.state.checked = newChecked
    }

    toggle() {
        this.state.checked = !this.state.checked;
    }

    getData() {
        return this.input.data;
    }

    handleClick() {
        var newChecked = !this.state.checked;

        var defaultPrevented = false;

        this.emit('toggle', {
            checked: newChecked,
            data: this.getData(),
            preventDefault: function() {
                defaultPrevented = true;
            }
        });

        if (!defaultPrevented) {
            this.state.checked = newChecked;
        }
    }
}

$ var classNames=[
    'app-checkbox',
    input['class'],
    state.checked && 'checked'
];

<app-button key="button" class=classNames onClick('handleClick')>
    <span class="app-checkbox-icon"/>
    <span key="checkboxLabel">
        <include(input.label || input.renderBody)/>
    </span>
</app-button>

style.scss {
  @import "src/global-style/variables.scss";

  .app-button.app-checkbox {
      background-color: $button-secondary-bg;
      color: $button-secondary-fg;
  }

  .app-button.app-checkbox.checked {
      background-color: $button-bg;
      color: $button-fg;
  }

  .app-checkbox-icon {
      background-image: url(/assets/img/markojs/unchecked.svg);
      background-size: contain;
      width: 18px;
      height: 18px;
      display: inline-block;
      background-repeat: no-repeat;
      opacity: 0.2;
      margin-right: 4px;
  }

  .app-checkbox.checked .app-checkbox-icon {
      background-image: url(/assets/img/markojs/checked.svg);
      opacity: 1.0;
  }
}
